import 'package:flutter/material.dart';
import 'package:proyecto_pa/Modelo/Categoria.dart';
import 'package:proyecto_pa/Utilidad/HiveCategorias.dart';

class ACategoria extends StatefulWidget {
  final Categoria? categoria;

  ACategoria({Key? key, this.categoria}) : super(key: key);

  @override
  _ACategoriaState createState() => _ACategoriaState();
}

class _ACategoriaState extends State<ACategoria> {
  late TextEditingController _idController;
  late TextEditingController _nombreController;
  late TextEditingController _descripcionController;
  late HiveCategorias _hiveCategorias;

  @override
void initState() {
  super.initState();
  _hiveCategorias = HiveCategorias();
  _idController = TextEditingController(text: widget.categoria?.id?.toString() ?? '');
  _nombreController = TextEditingController(text: widget.categoria?.nombre ?? '');
  _descripcionController = TextEditingController(text: widget.categoria?.descripcion ?? '');

  // Agregar un listener para validar el campo de ID
  _idController.addListener(() 
  {
    setState(() {}); // Actualiza el estado para habilitar/deshabilitar el botón
  });
}

  @override
  void dispose() {
    _idController.dispose();
    _nombreController.dispose();
    _descripcionController.dispose();
    super.dispose();
  }

  void _guardarCategoria() async 
  {
     int id = int.tryParse(_idController.text) ?? 0;
  String nombre = _nombreController.text.isEmpty ? 'c$id' : _nombreController.text;
  String descripcion = _descripcionController.text.isEmpty ? '...' : _descripcionController.text;


  // Crear una nueva categoría con los valores procesados
  Categoria nuevaCategoria = Categoria(
    id: id,
    nombre: nombre, // Usar la variable nombre procesada
    descripcion: descripcion, // Usar la variable descripcion procesada
  );

    if (widget.categoria == null) {
      bool success = await _hiveCategorias.agregarCategoria(nuevaCategoria);
      if (!success) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error: Ya existe una categoría con ese ID')),
        );
        return;
      }
    } else 
    {
      Categoria categoriaAnterior = widget.categoria!;
      if (categoriaAnterior.id != nuevaCategoria.id &&
          _hiveCategorias.buscarCategoria(nuevaCategoria.id) != null) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error: Ya existe una categoría con ese nuevo ID')),
        );
        return;
      }
      await _hiveCategorias.actualizarCategoria(categoriaAnterior, nuevaCategoria);
    }

    Navigator.pop(context, nuevaCategoria);
  }

 @override
Widget build(BuildContext context) {
  return Scaffold(
    appBar: AppBar(
      title: Text(widget.categoria == null ? 'Crear Categoría' : 'Editar Categoría'),
    ),
    body: Column( // Cambiamos a Column
      children: [
        Expanded( // Permite que el contenedor ocupe el espacio restante
          child: Container(
            color: Color(0xffA6B4F9), // Fondo azul claro
            padding: const EdgeInsets.all(16.0),
            child: SingleChildScrollView( // Envuelve el contenido en SingleChildScrollView
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  SizedBox(height: 40),
                  Text('ID', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
                  SizedBox(height: 5),
                  // TextField para el ID ______________________________________________________
                  TextField(
  controller: _idController,
  decoration: InputDecoration(
    border: OutlineInputBorder(),
    contentPadding: EdgeInsets.all(12),
    fillColor: Color(0xffD9D9D9),
    filled: true,
    suffixIcon: ClearButton(controller: _idController, text: 'Borrar ID'), // Agrega el botón de borrar
  ),
  keyboardType: TextInputType.number,
  style: TextStyle(fontSize: 16),
),
                  SizedBox(height: 40), // Reduce el espacio
                  Text('Nombre de Categoría', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
                  SizedBox(height: 5),
                  TextField(
  controller: _nombreController,
  decoration: InputDecoration(
    border: OutlineInputBorder(),
    contentPadding: EdgeInsets.all(12),
    fillColor: Color(0xffD9D9D9),
    filled: true,
    suffixIcon: ClearButton(controller: _nombreController, text: 'Borrar Nombre'), // Agrega el botón de borrar
  ),
  style: TextStyle(fontSize: 16),
),
                  SizedBox(height: 40), // Reduce el espacio
                  Text('Descripción', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
                  SizedBox(height: 5),
                  // Agregar un TextField para la descripción________________
                    TextField(
            controller: _descripcionController,
            decoration: InputDecoration(
            border: OutlineInputBorder(),
            contentPadding: EdgeInsets.all(12),
            fillColor: Color(0xffD9D9D9),
            filled: true,
            suffixIcon: ClearButton(controller: _descripcionController, text: 'Borrar Descripción'), // Agrega el botón de borrar
            ),
            style: TextStyle(fontSize: 16),
          ),
                  SizedBox(height: 60), // Espacio antes del botón
                  Center(
  child: ElevatedButton.icon(
    onPressed: _idController.text.isNotEmpty && 
                int.tryParse(_idController.text) != null && 
                int.parse(_idController.text) > 0 ? 
                _guardarCategoria : 
                null,
    icon: Icon(Icons.check),
    label: Text('Aceptar'),
    style: ElevatedButton.styleFrom(
      padding: EdgeInsets.symmetric(horizontal: 100, vertical: 20),
      backgroundColor: Color(0xff9BDAAC),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(20),
      ),
      minimumSize: Size(300, 50),
    ),
  ),
),
                  
                ],
              ),
            ),
          ),
        ),
      ],
    ),
  );

  
  }
}


class ClearButton extends StatelessWidget {
  final TextEditingController controller;
  final String text;

  const ClearButton({Key? key, required this.controller, required this.text}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      height: 48.0, // Altura del contenedor para que coincida con el TextField
      decoration: BoxDecoration(
        color: Color(0xff5A5CE2), // Color de fondo gris
        borderRadius: BorderRadius.circular(2.0), // Esquinas redondeadas
      ),
      child: IconButton(
        icon: Icon(Icons.delete_forever), // Cambia el ícono por uno que represente limpieza
        onPressed: () {
          controller.clear(); // Limpiar el TextField
        },
        tooltip: text, // Tooltip para el botón
        padding: EdgeInsets.zero, // Sin padding adicional
      ),
    );
  }
}
