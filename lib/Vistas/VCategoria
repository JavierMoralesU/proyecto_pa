import 'package:flutter/material.dart';
import 'package:proyecto_pa/Modelo/Categoria.dart';
import 'package:proyecto_pa/Utilidad/HiveCategorias.dart'; // Asegúrate de importar el archivo correcto de HiveCategorias
import 'package:proyecto_pa/Vistas/ACategoria';
import 'package:proyecto_pa/Utilidad/Preguntar.dart';


class VCategoria extends StatefulWidget {
  @override
  _VCategoriaState createState() => _VCategoriaState();
}

class _VCategoriaState extends State<VCategoria> {
  final HiveCategorias hiveCategorias = HiveCategorias();
  final ScrollController _scrollController = ScrollController();

  List<Categoria> seleccionadas = [];
  double _scrollOffset = 0; // Variable para guardar la posición del scroll

  void toggleSeleccion(Categoria categoria) {
    setState(() {
      if (seleccionadas.contains(categoria)) {
        seleccionadas.remove(categoria);
      } else {
        seleccionadas.add(categoria);
      }
    });
  }

  void eliminarSeleccionadas(BuildContext context) async 
  {
  // Pregunta al usuario si está seguro de eliminar las categorías seleccionadas
  bool? confirmacion = await Preguntar.mostrarConfirmacionEliminar(context, seleccionadas);

  if (confirmacion == true)
  {
    for (var categoria in seleccionadas) 
    {
      await hiveCategorias.eliminarCategoria(categoria.id);
    }
    setState(() {seleccionadas.clear(); });
  } else { print('Eliminación cancelada');}
}

  @override
  void initState() {
    super.initState();
    _scrollController.addListener(() {
      _scrollOffset = _scrollController.offset; // Guardar la posición actual del scroll
    });
  }

  @override
  void dispose() {
    _scrollController.dispose(); // Limpiar el controlador
    super.dispose();
  }


  @override
Widget build(BuildContext context) {
  return Scaffold(
    appBar: AppBar(
      toolbarHeight: 80, // Aumentar la altura de la AppBar
      backgroundColor: Color(0xff626AFF),
      leading: Builder(
        builder: (BuildContext context) {
          return SizedBox(
            width: 120, // Definir un ancho fijo con SizedBox
            child: Container(
              height: double.infinity, // Hacer que el contenedor ocupe toda la altura de la AppBar
              color: Color(0xffFF8389), // Fondo rojo
              child: IconButton(
                iconSize: 40, // Aumentar el tamaño del botón del menú
                icon: Icon(Icons.menu, color: Colors.black),
                onPressed: () {
                  Scaffold.of(context).openDrawer();
                },
              ),
            ),
          );
        },
      ),
      title: Row(
        children: [
          Spacer(), // Este elemento empuja el texto hacia el centro
          Center(
            child: Text(
              'Categorías',
              style: TextStyle(
                fontSize: 28, // Hacer el texto más grande
                fontWeight: FontWeight.bold,
                color: Colors.black,
              ),
            ),
          ),
          Spacer(), // Este elemento asegura que el texto esté centrado
        ],
      ),
      elevation: 0, // Quitar la sombra de la AppBar
    ),
    drawer: Drawer(
      child: ListView(
        padding: EdgeInsets.zero,
        children: <Widget>[
          DrawerHeader(
            decoration: BoxDecoration(
              color: Color(0xffFF8389),
            ),
            child: Text(
              'Menú',
              style: TextStyle(
                color: Colors.white,
                fontSize: 30,
              ),
            ),
          ),
          ListTile(
            leading: Icon(Icons.shopping_cart),
            title: Text('Venta'),
            onTap: () {
              // Acciones para navegar a la vista de ventas
            },
          ),
          ListTile(
            leading: Icon(Icons.inventory),
            title: Text('Productos'),
            onTap: () {
              // Acciones para navegar a la vista de productos
            },
          ),
          ListTile(
            leading: Icon(Icons.category),
            title: Text('Categorías'),
            enabled: false, // Deshabilitado porque estás en la vista actual
            onTap: () {},
          ),
          ListTile(
            leading: Icon(Icons.exit_to_app),
            title: Text('Salir'),
            onTap: () {
              // POP de el drawer y tambien de la pagina VCategoria
              Navigator.pop(context); // ESTO CIERRA EL DRAWER
              Navigator.pop(context); // ESTO CIERRA LA PAGINA
            },
          ),
        ],
      ),
    ),
    body: Container(
      color: Color (0xffA6B4F9), // Fondo azul claro para el contenedor
      child: Column(
        children: 
        [
          SizedBox(height: 20), // Espacio arriba de la lista
          // Parte 1.2: Cargar y mostrar la lista de categorías desde Hive
          Expanded
          (
            child: FutureBuilder<List<Categoria>>
            (
              future: hiveCategorias.obtenerTodasCategorias(), // Obtener las categorías de Hive
              builder: (context, snapshot) 
              {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return Center(child: CircularProgressIndicator()); // Indicador de carga
                } else if (snapshot.hasError) {
                  return Center(child: Text('Error al cargar las categorías.')); // Manejo de error
                } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
                  return Center(child: Text('No hay categorías disponibles.')); // No hay datos
                }

                final categorias = snapshot.data!; // Lista de categorías obtenida
                 WidgetsBinding.instance.addPostFrameCallback((_) {
                    _scrollController.jumpTo(_scrollOffset); // Restaura la posición del scroll
                  });


                return ListView.builder
                (
                  controller: _scrollController, // Asignar el controlador de scroll
                padding: EdgeInsets.all(8.0), // Padding alrededor de la lista
                itemCount: categorias.length,
                itemBuilder: (context, index) {
                final categoria = categorias[index];
                final isSelected = seleccionadas.contains(categoria); // Verificar si está seleccionada

          return Column(
            children: [
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 8.0, vertical: 2.0), // Espaciado más compacto
              child: Row(
              children: [
                // Columna 1: ID, Nombre, Descripción
                Expanded(
                child: Container(
                  padding: EdgeInsets.all(4.0), // Padding interno reducido
                  decoration: BoxDecoration(
                  color: Colors.white, // Fondo blanco
                  borderRadius: BorderRadius.circular(8.0), // Bordes redondeados
                  boxShadow: [
                    BoxShadow(
                    color: Colors.grey.withOpacity(0.5), // Sombra gris
                    spreadRadius: 2,
                    blurRadius: 5,
                    offset: Offset(0, 3), // Desplazamiento de la sombra
                    ),
                  ],
                  ),
                  child: Column(
                  crossAxisAlignment: CrossAxisAlignment.stretch, // Alinear al inicio
                  children: [
                    // Fila para ID y Nombre
                    Row(
                    children: [
                      // Celda para ID (más pequeña)
                      Container(
                      width: 70, // Ancho fijo para el ID
                      padding: EdgeInsets.all(4.0), // Padding interno reducido
                      decoration: BoxDecoration(
                        color: Colors.blue[100], // Color de fondo
                        border: Border(right: BorderSide(color: Colors.grey)), // Borde derecho
                      ),
                      child: Text('ID: ${categoria.id}'), // Mostrar ID
                      ),
                      // Celda para Nombre (ocupa el espacio restante)
                      Expanded(
                      child: Container(
                        padding: EdgeInsets.all(4.0), // Padding interno reducido
                        decoration: BoxDecoration(
                        color: Colors.blue[200], // Color de fondo
                        ),
                        child: Text('${categoria.nombre}'), // Mostrar nombre
                      ),
                      ),
                    ],
                    ),
                    // Celda para Descripción (más larga)
                    Container(
                    padding: EdgeInsets.all(4.0), // Padding interno reducido
                    decoration: BoxDecoration(
                      color: Colors.blue[300], // Color de fondo
                      border: Border.all(color: Colors.grey), // Borde completo
                      borderRadius: BorderRadius.only(bottomLeft: Radius.circular(8.0), bottomRight: Radius.circular(8.0)), // Bordes redondeados en la parte inferior
                    ),
                    child: Text(
                      '${categoria.descripcion}', // Mostrar descripción
                      overflow: TextOverflow.ellipsis, // Manejar texto largo
                      maxLines: 1, // Limitar a una línea
                    ),
                    ),
                  ],
                  ),
                ),
                ),
                // Columna 2: Botón para selección
                Container(
                margin: EdgeInsets.symmetric(horizontal: 8.0), // Espacio entre columnas
                child: ElevatedButton(
                  onPressed: () => toggleSeleccion(categoria), // Acción de selección
                  style: ElevatedButton.styleFrom(
                  backgroundColor: isSelected ? Colors.green : Colors.grey[800], // Color de fondo cuando no está seleccionado
                  minimumSize: Size(isSelected ? 120 : 100, 60), // Tamaño mínimo del botón, cambia según selección
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8.0), // Bordes redondeados
                  ),
                  ),
                  child: Icon(
                  isSelected ? Icons.check : Icons.check_box_outline_blank, // Cambiar el icono de no seleccionado
                  size: 24, // Tamaño del icono
                  color: Colors.white, // Color del icono: blanco
                  ),
                ),
                ),
              ],
              ),
            ),
            SizedBox(height: 8.0), // Espaciado entre elementos
            ],
          );
          },
        );
                //Fin de ListView.builder
              },
            ), 
          ), 
            // Parte 2: Botones
            Container(
            color: Color(0xff5A5CE2), // Color del contenedor de botones
            padding: EdgeInsets.all(10), // Espaciado interno del contenedor
            height: 200, // Aumentar la altura del contenedor
            child: Column(
              children: [
              SizedBox(height: 10), // Espacio arriba de los botones
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly, // Espaciado entre botones
                children: [
                ElevatedButton(
                  onPressed: () async {
                  // Navegar a la página de agregar categorías y esperar su retorno
                  await Navigator.push(
                    context, 
                    MaterialPageRoute(builder: (context) => ACategoria()),
                  );

                  // Una vez que regresas de la pantalla ACategoria, recargas la lista de categorías
                  setState(() {});
                  },
                  style: ElevatedButton.styleFrom(
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(0), 
                  ),
                  minimumSize: Size(50, 60), 
                  ),
                  child: Icon(Icons.add), // Icono de agregar
                ),

                ElevatedButton(
  onPressed: seleccionadas.isNotEmpty ? () => eliminarSeleccionadas(context) : null, // Habilitar solo si hay seleccionadas
  style: ElevatedButton.styleFrom(
    shape: RoundedRectangleBorder(
      borderRadius: BorderRadius.circular(0), // Botones cuadrados
    ),
    minimumSize: Size(50, 60), // Tamaño mínimo cuadrado
  ),
  child: Icon(Icons.delete), // Icono de borrar
),


ElevatedButton(
  onPressed: seleccionadas.length == 1 
      ? () {
          // Navegar a la pantalla de edición pasando la categoría seleccionada
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => ACategoria(categoria: seleccionadas.first), // Pasar la categoría seleccionada
            ),
          ).then((_) {
            // Al volver de ACategoria
            setState(() {
              seleccionadas.clear(); // Limpiar la lista de seleccionadas
            });
          });
        } 
      : null, // Habilitar solo si hay un elemento seleccionado
  style: ElevatedButton.styleFrom(
    shape: RoundedRectangleBorder(
      borderRadius: BorderRadius.circular(0), // Botones cuadrados
    ),
    minimumSize: Size(50, 60), // Tamaño mínimo cuadrado
  ),
  child: Icon(Icons.edit), // Icono de editar
),
                ],
              ),
                SizedBox(height: 30), // Espacio entre la fila de botones y el botón grande
                Center(
                child: ElevatedButton
                (
                  onPressed: () 
                  {
                    setState(() {
                    seleccionadas.clear(); // Limpiar la lista de seleccionadas
                    });
                  },
                  style: ElevatedButton.styleFrom(
                  padding: EdgeInsets.symmetric(horizontal: 20), // Padding horizontal
                  minimumSize: Size(340, 60), // Ajusta el ancho aquí
                  ),
                  child: Icon(Icons.cancel), // Icono de cancelar
                ),
                ),
              ],
            ), // Fin de Column (botones)
            ), // Fin de Container (botones)
          ],
          ), // Fin de Column (body)
        ), // Fin de Container
  );
  }
}
